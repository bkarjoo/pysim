# read csv data generated by kibot data manager
import config
import datetime
import pandas as pd
import os
import pickle


class Interval():
    daily = 'daily'
    minute = 'minute'
    # m1 = '1'
    # m3 = '3'
    # m5 = '5'
    # m10 = '10'
    # m15 = '15'
    # m30 = '30'


class Instrument():
    stock = 'stocks'
    etf = 'etfs'
    forex = 'forex'
    futures = 'futures'


def get_csv_path(interval, instrument, date_time):
    if interval == Interval.daily:
        return '{}/csv/{}/{}/{}'.format(config.data_root, instrument, interval, date_time.year)
    else:
        return '{}/csv/{}/{}/{}/{}'.format(config.data_root, instrument, interval, date_time.year, date_time.month)


def get_pickle_path(interval, instrument, date_time):
    if interval == Interval.daily:
        return '{}/pkl/{}/{}/{}'.format(config.data_root, instrument, interval, date_time.year)
    else:
        return '{}/pkl/{}/{}/{}/{}'.format(config.data_root, instrument, interval, date_time.year, date_time.month)


def load_csv(interval, instrument, date_time, symbol):
    path = '{}/{}.txt'.format(get_csv_path(interval, instrument, date_time), symbol)

    if interval == Interval.daily:
        headers = ['date', 'open', 'high', 'low', 'close', 'volume']
        dtypes = {'date': 'str', 'open': 'float', 'high': 'float', 'low': 'float', 'close': 'float',
                  'volume': 'int'}
        parse_dates = ['date']
        return pd.read_csv(path, names=headers, dtype=dtypes, parse_dates=parse_dates,
                         index_col='date')
    else:
        headers = ['date_time', 'open', 'high', 'low', 'close', 'volume']
        dtypes = {'date_time': 'str', 'open': 'float', 'high': 'float', 'low': 'float', 'close': 'float',
                  'volume': 'object'}
        parse_dates = ['date_time']
        df = pd.read_csv(path, names=headers, dtype=dtypes, parse_dates=parse_dates,
                         index_col='date_time')
        df['symbol'] = symbol
        return df



def convert_csv_to_pickle(interval, instrument, date_time):
    path = get_csv_path(interval, instrument, date_time)

    x = os.listdir(path)

    for f in x:
        symbol = f[:-4]
        print symbol
        df = load_csv(interval, instrument, date_time, symbol)
        pkl_path = '{}/{}.pkl'.format(get_pickle_path(interval, instrument, date_time), symbol)
        file_handler = open(pkl_path, 'wb')
        pickle.dump(df, file_handler)
        file_handler.close()



#load_csv(Interval.minute, Instrument.stock, datetime.datetime(2017, 1, 1), 'GE')
convert_csv_to_pickle(Interval.minute, Instrument.stock, datetime.datetime(2017,1,1))